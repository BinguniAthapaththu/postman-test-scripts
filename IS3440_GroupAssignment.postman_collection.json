{
	"info": {
		"_postman_id": "e55ed6dd-a433-4d27-a88d-1b739abcdb1b",
		"name": "IS3440_GroupAssignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21534077"
	},
	"item": [
		{
			"name": "CreateBook",
			"item": [
				{
					"name": "CreateBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"pm.collectionVariables.set('id',response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Pride and Prejudice\",\r\n  \"author\": \"Glory Starsmeare\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetAllBookList",
			"item": [
				{
					"name": "GetAllBookListByAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function (){\r",
									"    const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\"type\": \"number\"},\r",
									"                    \"title\": {\"type\": \"string\"},\r",
									"                    \"author\": {\"type\": \"string\"}\r",
									"            },\r",
									"            \"required\": [\"id\", \"title\", \"author\"]\r",
									"            }\r",
									"        };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBookListByUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function (){\r",
									"    const schema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": {\"type\": \"number\"},\r",
									"                    \"title\": {\"type\": \"string\"},\r",
									"                    \"author\": {\"type\": \"string\"}\r",
									"            },\r",
									"            \"required\": [\"id\", \"title\", \"author\"]\r",
									"            }\r",
									"        };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBookListByAdminWithInvalidPasswrod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "abcdefg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBookListByUserWithInvalidPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "abcdefg",
									"type": "string"
								},
								{
									"key": "username",
									"value": "user",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBookListWithoutAuthorizationHeader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetABook",
			"item": [
				{
					"name": "GetABookByAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function (){\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"author\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"id\", \"title\", \"author\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Given book is retrieved\", function(){\r",
									"    const expectedBookId = pm.collectionVariables.get(\"id\");\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.id).to.eql(parseInt(expectedBookId));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetABookByUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function (){\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": { \"type\": \"integer\" },\r",
									"            \"title\": { \"type\": \"string\" },\r",
									"            \"author\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\"id\", \"title\", \"author\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Given book is retrieved\", function(){\r",
									"    const expectedBookId = pm.collectionVariables.get(\"id\");\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.id).to.eql(parseInt(expectedBookId));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetABookByInvalidUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "abcdefg",
									"type": "string"
								},
								{
									"key": "username",
									"value": "binguni",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetABookByNonexistentID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'Book not found'\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    const expectedMessage = \"Book not found\";\r",
									"    pm.expect(responseBody).to.include(expectedMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetABookByInvalidHTTPMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteABook",
			"item": [
				{
					"name": "DeleteABookByAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteABookByUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteABookByNonexistentID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'Book not found'\", function () {\r",
									"    const responseBody = pm.response.text();\r",
									"    const expectedMessage = \"Book not found\";\r",
									"    pm.expect(responseBody).to.include(expectedMessage);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteABookByInvalidUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "abcdefg",
									"type": "string"
								},
								{
									"key": "username",
									"value": "binguni",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteABookByInvalidHTTPRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"books",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		}
	]
}